#include <cs50.h>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
int count_letters(string text);
int count_words(string text);
int count_sentences(string text);
int coleman_index(int letters, int words, int sentences);
int main(void)
{
    string text = get_string("Text: "); // prommpt the user for some text
    int letters =
        count_letters(text); // count the number of letters, words, and sentences in the text
    int words = count_words(text);
    int sentences = count_sentences(text);
    int grade = coleman_index(letters, words, sentences); // compute the coleman-liau index
    if (grade < 1)                                        // if grade is less than 1
    {
        printf("Before Grade 1\n"); // print before grade 1
    }
    else if (grade >= 16) // if grade is more than 16, print 16+
    {
        printf("Grade 16+\n");
    }
    else
    {
        printf("Grade %i\n", grade); // else print as is; %i inserts the value of grade
    }
}
int count_letters(string text) // computes the number of letters
{
    int letters = 0;
    for (int i = 0, n = strlen(text); i < n;
         i++) // loop through the string (getting the legnth of the string with streln)
    {
        if (isalpha(text[i])) // check if the character is an alphabetic character
        {
            letters++; // proceed to increment the letter countt
        }
    }
    return letters; // the total count of letters
}
int count_words(string text) // compute the number of words
{
    int words = 1;
    for (int i = 0, n = strlen(text); i < n; i++) // loop again
    {
        if (isspace(text[i])) // isspace check whether a character is whitespace (a newline, space,
                              // or tab)
        {
            words++; // then only increment word count per space
        }
    }
    return words;
}
int count_sentences(string text) // compute the number of sentences
{
    int sentences = 0;
    for (int i = 0, n = strlen(text); i < n; i++) // loop
    {
        if (text[i] == '.' || text[i] == '!' || text[i] == '?') // if sentences endings are used
        {
            sentences++; // then increment sentence count per .!?
        }
    }
    return sentences;
}
int coleman_index(int letters, int words, int sentences)
{
    float L =
        (letters / (float) words) * 100; // calculate average number of letters per 100 in text
    float S = (sentences / (float) words) * 100; // same for sentences
    float index = 0.0588 * L - 0.296 * S - 15.8; // index = 0.0588 * L - 0.296 * S - 15.8
    return round(index);                         // rounds off the index to the nearest whole
}
